import ast
import json
import os
import sys
import webbrowser
from pyvis.network import Network

# App's header - displayed before the rest of the commands.
print("================================\nAttack Tree DREAD Calculator App\n================================")
print("You will have to input a JSON file and name the output file, which will automatically open in your browser.\n")

# Instantiate a Network object (creates a visjs network, i.e. in this case a hierarchical attack tree).
attack_tree_net = Network(height="100%", width="50%", bgcolor="#222222", font_color="#333333", layout=True)

# "file_location" asks the user for the file's location and holds its value for the next step.
file_location = raw_input("1. Enter the file's location: ")

"""
This function takes the "file_location" variable and based on it opens the JSON file,
reads it in with the help of json module.
literal_eval method is one of the helper functions that helps traverse an abstract syntax tree.
"""
with open(file_location, 'r') as file:
    attack_tree = json.load(file)
    attack_tree = ast.literal_eval(json.dumps(attack_tree))

# Extracts nodes from the attack_tree dictionary into a separate variable.
nodes = attack_tree['nodes']

"""
This function adds a node to the "attack_tree_net" network, which was instantiated on top of the file,
for each node in the "nodes" list.
It assigns values like id, label and title to each node based on the "id_number" and "label" variables.
Aside from that, it also assigns the node's shape. 
"""
for n in nodes:
    id_number = n["id"]
    label = n["name"]

    attack_tree_net.add_node(str(id_number), str(label), shape="box", title=label)

# Extracts edges (lines) from the attack_tree dictionary into a separate variable.
edges = attack_tree['edges']

"""
This function adds an edge, i.e. a line to the "attack_tree_net" network, which was instantiated on top of the file,
for each edge in the "edges" list.
It assigns values "from" and "to", meaning from which node to which is it supposed to draw a line.
"""
for e in edges:
    to_id = e['to']
    from_id = e['from']
    attack_tree_net.add_edge(str(from_id), str(to_id))

"""
file_name asks the user to enter the output file's name, i.e. the HTML file that will be generated by this programme.
It is then later used in the show() function of the pyvis library
"""
file_name = raw_input("2. Enter the output file's name: ")

# show() function writes a static HTML file and saves it locally.
attack_tree_net.show(file_name + ".html")

"""
"url" variable holds the file path for the HTML file generated in the previous function.
It utilises the "os" and "sys" modules of python to find the path of the current folder. 
"""
url = os.path.join(sys.path[0], file_name + ".html")


"""
This function (open()), with the help of the "webbrowser" module, opens the previously generated
HTML file in an internet browser (in a new tab). 
"""
webbrowser.open("file://" + url, new=2)
